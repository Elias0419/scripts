# Oh My Zsh Setup
export ZSH="$HOME/.oh-my-zsh"
ZSH_THEME="spaceship"
plugins=(python)

source $ZSH/oh-my-zsh.sh

# Environment Variables
export PATH="$PATH:/home/x/.dotnet/tools/"
export PATH="$PATH:$(go env GOPATH)/bin"
export PATH="$PATH:/usr/local/lib64/ruby/gems/3.2.0/bin"
export QT_QPA_PLATFORMTHEME=qt5ct
export PYTHONSTARTUP=$HOME/.pythonrc.py

# Ruby Configuration
export GEM_HOME=/usr/local/lib64/ruby/gems/3.2.0
export GEM_PATH=/usr/local/lib64/ruby/gems/3.2.0

# Aliases
alias py="python3"
alias bat="upower -i \$(upower -e | grep BAT) | grep -E 'state|percentage'"
alias icanhazip="curl icanhazip.com"
alias black="python3 -m black"
alias nano='micro'
alias ntp="ntpdate -b -u 0.gentoo.pool.ntp.org"

# Functions
runas() {
    su -c "$*" x
}

normalize_version() {
    version="$1"
    echo "$version" | sed -E 's/\.0(-rc)/\1/'
}

update() {
    local sync=false
    while [[ "$1" != "" ]]; do
        case $1 in
            -s|--sync)
                sync=true
                ;;
            *)
                echo "[ -s | --sync ]"
                return 1
                ;;
        esac
        shift
    done

    if [ "$sync" = true ]; then
        emaint --auto sync || return 1

    fi
    emerge -auvDN @world || return 1
    check_kernel_version
}

check_kernel_version() {
    running_version=$(uname -r | sed 's/-[^-]*$//')
    releases_json=$(curl -s https://kernel.org/releases.json) || { echo "Failed to fetch releases.json from kernel.org"; return 1; }
    mainline_version=$(echo "$releases_json" | jq -r '.releases[] | select(.moniker=="mainline") | .version')
    norm_running=$(normalize_version "$running_version")
    norm_mainline=$(normalize_version "$mainline_version")
    echo "Running kernel: $running_version (debug: $norm_running)"
    echo "Latest mainline: $mainline_version (debug: $norm_mainline)"
    if [[ "$norm_running" != "$norm_mainline" ]]; then
        get_kernel "$mainline_version" "$releases_json"
    else
        echo " "
    fi
}

get_kernel() {
    target_version="$1"
    releases_json="$2"
    archive_url=$(echo "$releases_json" | jq -r '.releases[] | select(.moniker=="mainline") | .source')
    archive_file=$(basename "$archive_url")
    echo "Getting the new kernel..."
    echo "Downloading: $archive_url"
    curl -LO "$archive_url" || { echo "Download failed"; return 1; }
    tar -xf "$archive_file" -C /usr/src || { echo "Extraction failed"; return 1; }

    if [[ "$archive_file" == *.tar.gz ]]; then
        kernel_dir="${archive_file%.tar.gz}"
    elif [[ "$archive_file" == *.tar.xz ]]; then
        kernel_dir="${archive_file%.tar.xz}"
    else
        kernel_dir="${archive_file%.*}"
    fi

    ln -sfn "/usr/src/$kernel_dir" /usr/src/linux || { echo "Symlink failed"; return 1; }
    kernel_update
}

kernel_update() {
    cd /usr/src/linux
    mount /dev/nvme0n1p1 /boot
    cp /home/x/kernel_config_p14s .config
    make oldconfig
    cp .config /home/x/kernel_config_p14s
    make -j13
    mv /boot/bzImage.efi /boot/bzImage.efi.old
    cp /usr/src/linux/arch/x86/boot/bzImage /boot/bzImage.efi
    echo -n "Kernel update complete. Reboot now? (y/N): "
    read response
    case "$response" in
        [yY][eE][sS]|[yY])
            reboot
            ;;
        *)
            echo "Bye"
            ;;
    esac
}



# Plugins
source /usr/share/zsh/site-functions/zsh-syntax-highlighting.zsh
